#!/usr/bin/python
#
# Share By Link: take arbitrary input(s) $* and share them 
# using an appropriate method.
#
# Initial: 5/25/2005 Leo Szumel

import tempfile, sys, re, os, time, urllib, glob, datetime, htmllib
import formatter, urlparse
#from  Tkinter import Tk

# These are the defaults.
# Put modifications in ~/.jupirc
HTML_ROOT = 'machine:path'
HTML_DIR  = 'temp'
HTML_EXTERNAL_ROOT = 'probably http://machine/~something'
ZIP_ICON = 'path-to-image'
TEXT_ICON = 'path-to-image'
PAGEAUTH = 'Mr Mister'
AUTHEMAIL= 'author@domain'
THUMB_W = '256'
THUMB_H = '256'
DEF_EXPIRY = 7 # days to expiration
RCFILE = '.jupirc'
THUMBTYPE = '.png' # canuse .gif for MacOS
RCROOTS = ['~/','./']

for rcc in [os.path.expanduser(r + RCFILE) for r in RCROOTS]:
  if os.path.exists(rcc):
    try:    exec open(rcc).read()
    except: print '!!! Problem with ' + rcc

# for safe debugging
def ossystem(str):
  print 'os.system ' + str

def ospopen(str):
  print 'os.popen ' + str

def getTinyurl(url):
  '''return a tinyurl if possible, else the url'''
  try:
    h = urllib.urlopen('http://www.tinyurl.com/create.php?url=' + url).read()
    turl = re.search('<a href=\"(http://tinyurl.com/[^"]+)', h).group(1)
  except:
    turl = url
  return turl

def bytesToGeek(size):
   '''return a string representing the greek/metric suffix of a size
    from http://mail.python.org/pipermail/python-list/1999-December/018406.html
   '''
   _abbrevs = [ (1<<50L, 'P'), (1<<40L, 'T'), (1<<30L, 'G'), (1<<20L, 'M'), 
    (1<<10L, 'k'), (1, 'B') ]
   for factor, suffix in _abbrevs:
     if size > factor: break
   return str(int(size/factor)) + suffix 

class SomethingToPost:
  ''' Container for an object to post online
      should define:
      
      fname   -- name of object
      type    -- type of object
      file    -- temporary file name (will be posted)
                 * this can be used as a scratch file intermediately
      pfile   -- file representing a preview of the object
      text    -- textual description of the object
  '''
      
  def __init__(self, fname, postdir):
    self.fname = fname.replace(' ','\ ')
    self.type = os.path.splitext(fname)[1].lower()
    self.dir  = postdir
    self.file = '%s/%s' % (self.dir, os.path.basename(fname))
    self.file = self.file.replace(' ','_')
    fid,self.pfile = tempfile.mkstemp(dir=self.dir, suffix=THUMBTYPE)
    os.close(fid)

  def thumbnailByConvert(self, source, rescale=1):
    ''' Standard preview via imagemagick '''
    if rescale: size = '-resize %sx%s\>' % (THUMB_W, THUMB_H)
    else:       size = ''
    os.system('convert %s %s -frame 3x3 %s' % (
      source, size, self.pfile))

  def thumbnailOfType(self):
    ''' Standard preview '''
    fid,self.pfile = tempfile.mkstemp(dir=self.dir, suffix=THUMBTYPE)
    os.system('convert -size 96x64 xc:transparent -font Arial.ttf -pointsize 32 -stroke magenta -draw "text 10,45 \'%s\'" -frame 3x3 %s' % (
      self.type or ' ? ', self.pfile))
    os.close(fid)

  def post(self, postdir, index):
    ''' return fields for HTML code; use relative paths '''
    file  = os.path.basename(self.file)
    pfile = os.path.basename(self.pfile)
    size  = bytesToGeek(os.path.getsize(self.file))
    return {'file':file, 'img':pfile, 'text':self.text, 'size':size}

class ZIP(SomethingToPost):
  ''' zip archive
  '''
  def __init__(self, fname, postdir):
    SomethingToPost.__init__(self, fname, postdir)

  def prep(self):
    ''' test all and post 5 files '''
    self.thumbnailByConvert(ZIP_ICON)
    self.text = os.popen('unzip -t %s | grep testing | head -5' % self.fname).read()
    os.system('cp %s %s' % (self.fname, self.file))

    return [self]

class Text(SomethingToPost):
  ''' Any text file
  '''
  def __init__(self, fname, postdir):
    SomethingToPost.__init__(self, fname, postdir)

  def prep(self):
    os.system('a2ps %s --prologue=color --portrait --columns=1 --pages=1 --pretty-print --delegate=0 -o - | convert - -crop 256x128+0+25 %s' % (self.fname, self.pfile))
    self.thumbnailByConvert(self.pfile, rescale=0)
    self.text = os.popen('head -5 %s | cut -c1-40' % self.fname).read()
    os.system('cp %s %s' % (self.fname, self.file))
 
    return [self]

class PS(SomethingToPost):
  ''' Postscript (PS) files
  '''
  def __init__(self, fname, postdir):
    SomethingToPost.__init__(self, fname, postdir)

  def prep(self):
    ''' grab the first page, reduce and frame it '''
    os.system('psselect -p1 %s %s' % (self.fname, self.file))
    self.thumbnailByConvert(self.file)
    os.system('cp %s %s' % (self.fname, self.file))
    
    self.text = os.popen('ps2ascii %s | head -8 | cut -c1-40' % self.file).read()
 
    return [self]

class PDF(SomethingToPost):
  ''' Acrobat (PDF) files
  '''
  def __init__(self, fname, postdir):
    SomethingToPost.__init__(self, fname, postdir)

  def prep(self):
    ''' grab the first page, reduce and frame it '''
    os.system('pdfnup --nup 1x1 --pages 1-1 %s --outfile %s' % (
        self.fname, self.file))
    self.thumbnailByConvert(self.file)
    os.system('cp %s %s' % (self.fname, self.file))
    
    self.text = os.popen('pdfinfo %s | egrep \"version|Page\"' % self.file).read()
    self.text += os.popen('ps2ascii %s | head -8 | cut -c1-40' % self.file).read()
 
    return [self]

class Image(SomethingToPost):
  ''' Any images that imagemagick can handle
  '''
  def __init__(self, fname, postdir):
    SomethingToPost.__init__(self, fname, postdir)

  def prep(self):
    ''' Reduce to reasonable browser size '''
    os.system('convert -size 1024x768 %s -resize 1024x768\> %s' % (
        self.fname, self.file))
    self.thumbnailByConvert(self.fname)
    os.system('cp %s %s' % (self.fname, self.file))
    
    self.text = os.popen('identify -format \'%%wx%%h %%e\' %s' % self.file).read()
    if self.type == '.jpg':
      self.text += os.popen('jhead %s | egrep \"Date|model|Flash|Focal|Exposure|Aperture|ISO\"' % self.file).read()
 
    return [self]

class NONE(Text):
  ''' For everything else, there's MasterCard
      Subclass from Text in case we think this contains text
  '''
  def __init__(self, fname, postdir):
    Text.__init__(self, fname, postdir)

  def prep(self):
    ''' Just link to it '''
    os.system('cp %s %s' % (self.fname, self.file))
    self.thumbnailOfType()
    sample = os.popen('head -5 %s' % self.file).read()[:100].strip()
    if re.search('^#!/', sample):
      Text.prep(self)
    else:
      if sample.replace(' ','').isalnum():
        self.text = sample
      else:
        self.text = 'No preview for file type %s' % self.type

    return [self]

class HTML(NONE):
  ''' HTML code
  '''
  def __init__(self, fname, postdir):
    NONE.__init__(self, fname, postdir)

  def prep(self):
    ''' Goal here is to grab links for the text preview  '''
    #Text.prep(self)
    Text.prep(self)
    
    html = open(self.file).read()
    p = htmllib.HTMLParser(formatter.NullFormatter())
    p.feed(html)
    p.close()
    urls = {}
    for u in [u for u in p.anchorlist if u[0:4] == 'http']:
      urls[u] = urls.get(u, 0) + 1
    urlfreqs = [(f,u) for (u, f) in urls.items()]
    urlfreqs.sort()
    self.text = ''
    for (f,u) in urlfreqs[0:5]:
      self.text += '<a href=\"%s\">%s</a>\n' % (u, u[0:30])
 
    return [self]

if __name__ == '__main__':
  stps = []
  postdir = tempfile.mkdtemp()
  options = [o for o in sys.argv[1:] if o[0] == '-']
  todo    = [o for o in sys.argv[1:] if o[0] != '-']

  for t in todo:
    if os.path.isdir(t):
      todo.extend(glob.glob(t+'/*'))
      continue
    try:
      type = os.path.splitext(t)[1].lower()
      if type == '.ps':
        stp = PS(t, postdir)
      elif type == '.pdf':
        stp = PDF(t, postdir)
      elif type == '.zip':
        stp = ZIP(t, postdir)
      elif type in ['.txt','.py','.c','.h']:
        stp = Text(t, postdir)
      elif type in ['.html','.htm']:
        stp = HTML(t, postdir)
      # handle other types here, before default
      else:
        test = os.popen4('identify -verbose ' + t)[1].read()
        if re.search('decode delegate|Improper|Unable|missing an image',
            test):
          raise Exception
        else:
          stp  = Image(t, postdir)
    except:
      print 'Sorry, don\'t know what to do with ' + t
      stp = NONE(t, postdir)
    for s in stp.prep():
        stps.append(s)
  
  indexf,indexn = tempfile.mkstemp(dir=postdir, suffix='.html')
  
  os.write(indexf, '''
    <html><body><center>
    <meta name=\"Generator\" content=\"Python script\">
    <meta name=\"ROBOTS\" content=\"NOINDEX, NOFOLLOW\">
    <title>A quick note to you from %s</title>
    <h3>A quick note to you from %s</h3>
    <p><i>Please do not link to this page</i></p>
    <hr width=50%%>
    <table border=\"0\" width=\"66%%\" cellspacing=\"10\">''' % (
      PAGEAUTH, PAGEAUTH))

  template = '''
    <tr>
      <td align=\"right\">
        <a href=\"%(file)s\">
        <img border=0 src=\"%(img)s\" alt=\"%(file)s\"></img> </a>
      </td>
      <td>
        <a href=\"%(file)s\">%(file)s (%(size)s)</a><br>
        <pre>%(text)s</pre>
      </td>
    </tr>'''
  
  for s in stps:
    os.write(indexf, template % s.post(postdir, indexf))
     
  mailto = AUTHEMAIL.split('@')
  os.write(indexf, '''
    </table><hr width=50%%>
    <BR><small>
      Generated on behalf of 
      <script language="javascript">
        <!-- 
        var domain = "%s"
        var mail = "mail" + "to:" + "%s@" + domain 
        document.write("<a href=\\"" + mail + "\\" class=\\"nav\\">");
        document.write("%s");
        document.write("</a>");
        // -->
      </script>
      using <a href="http://jupi.berlios.de">jupi 0.1</a>. %s.<br>
    </small>
    </center></body></html> ''' % (mailto[1], mailto[0], PAGEAUTH, 
      time.asctime()))
  os.close(indexf)
  expirydate = (datetime.timedelta(DEF_EXPIRY) + datetime.date.today()).isoformat()
  open(os.path.join(postdir,'.expiry'),'w').write(expirydate)
  os.system('chmod -R a+rx ' + postdir)
  os.system('scp -rp %s %s/%s' % (postdir, HTML_ROOT, HTML_DIR))
  longurl = '%s/%s/%s/%s' % (HTML_EXTERNAL_ROOT,
      HTML_DIR, os.path.basename(postdir), os.path.basename(indexn))
  
  if '-clip' in options:
    try:
#      root = Tk()
#      root.clipboard_clear()
#      root.clipboard_append(tinyurl)
      print 'copied to clipboard.'
    except: pass
  if not '-bigurl' in options:
    tinyurl = getTinyurl(longurl)
    print tinyurl
  else:
    print longurl

  
   
